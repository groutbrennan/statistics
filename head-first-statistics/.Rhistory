}
spread(6, 1, 500, 7)
spread <- function(r1, r2, bet, odds) {
x <- c((bet-(bet*2)), (bet*odds))
probability <- c(round((r1-1)/r1, digits = 3), round((r2/r1), digits = 3)))
print(x)
print(probability)
print(sum(x * probability))
}
spread(6, 1, 500, 7)
spread <- function(r1, r2, bet, odds) {
x <- c((bet-(bet*2)), (bet*odds))
probability <- c((r1-1)/r1, (r2/r1))
print(x)
print(probability)
print(sum(x * round(probability, digits = 3)))
}
spread(6, 1, 500, 7)
spread <- function(r1, r2, bet, odds) {
x <- c((bet-(bet*2)), (bet*odds))
probability <- c((r1-1)/r1, (r2/r1))
print(sum(x * round(probability, digits = 3)))
}
spread(6, 1, 500, 7)
print(factorial(6))
print(factorial(3))
spread(factorial(6), 1, 500, 7)
spread(factorial(3), 1, 500, 7)
spread(factorial(3), 1, 500, factorial(3)+1)
print(factorial(0))
print(factorial(1))
print(factorial(2))
print(factorial(3))
spread <- function(r1, r2, bet, odds) {
x <- c((bet-(bet*2)), (bet*odds))
probability <- c((r1-1)/r1, (r2/r1))
print(probability)
print(sum(x * round(probability, digits = 3)))
}
## Factorial takes all of the numbers from n down to 1 called arrangements.
## Factorial of 3 = 3*2*1 = 6.
spread(factorial(3), 1, 500, factorial(3)+1)
spread(factorial(7), 1, 500, factorial(7)+1)
print(factorial(7))
print(1/factorial(7))
print(1/factorial(3))
print(factorial(3))
arrangement <- function(x, y) {
n1 <- factorial(x)
n2 <- factorial(y)
p <- 1 / (n1 * n2)
print(p)
}
arrangement_p <- function(x, y) {
n1 <- factorial(x)
n2 <- factorial(y)
p <- 1 / (n1 * n2)
print(p)
}
arrangement_p(3,4)
telephone_number_p <- function(x, y) {
n1 <- factorial(x)
n2 <- factorial(y)
p <- 1 / (n1 * n2)
print(p)
}
telephone_number_p(3,4)
ssn_p <- function(x, y, z) {
n1 <- factorial(x)
n2 <- factorial(y)
n3 <- factorial(z)
p <- 1 / (n1 * n2 * n3)
print(p)
}
ssn_p(3, 2, 4)
spread <- function(n, bet, odds) {
x <- c((bet-(bet*2)), (bet*odds))
probability <- c((n-1)/n, (1/n))
print(probability)
print(sum(x * round(probability, digits = 3)))
}
## Factorial takes all of the numbers from n down to 1 called arrangements.
## Factorial of 3 = 3*2*1 = 6.
spread(factorial(3), 500, factorial(3)+1)
## Spread function calculates the spread given the possibilities, bet, and odds.
## If there are 6 different ways to win, then the spread is ratio is 7:1.
## The bet is $500.
spread <- function(n, bet, odds) {
x <- c((bet-(bet*2)), (bet*odds))
probability <- c((n-1)/n, (1/n))
print(sum(x * round(probability, digits = 3)))
}
## Factorial takes all of the numbers from n down to 1 called arrangements.
## Factorial of 3 = 3*2*1 = 6.
spread(factorial(3), 500, factorial(3)+1)
spread(factorial(7), 500, factorial(7)+1)
## Spread function calculates the spread given the possibilities, bet, and odds.
## If there are 6 different ways to win, then the spread is ratio is 7:1.
## The bet is $500.
spread <- function(n, bet, odds) {
x <- c((bet-(bet*2)), (bet*odds))
probability <- c((n-1)/n, (1/n))
print(sum(x * round(probability, digits = 3)))
}
## Factorial takes all of the numbers from n down to 1 called arrangements.
## Factorial of 3 = 3*2*1 = 6.
spread(factorial(3), 500, factorial(3)+1)
spread <- function(n, bet, odds) {
x <- c((bet-(bet*2)), (bet*odds))
probability <- c((n-1)/n, (1/n))
winnings <- sum(x * round(probability, digits = 3))
print(winnings)
}
## Factorial takes all of the numbers from n down to 1 called arrangements.
## Factorial of 3 = 3*2*1 = 6.
spread(factorial(3), 500, factorial(3)+1)
print(1/factorial(10))
print(factorial(9))
print(1/factorial(9))
## Finding the probability if the arrangements are in a circle.
## Fix the position of one number (n-1)! then calculate the number of ways for the rest of the numbers.
circle_arrangement_p <- function (x) {
fix_n <- x - 1
n <- factorial(fix_n)
print(n)
}
circle_arrangement_p(10)
circle_arrangement_p <- function (x) {
fix_n <- x - 1
n <- factorial(fix_n)
p <- 1 / n
print(p)
}
circle_arrangement_p(10)
circle_arrangement_p(3)
circle_arrangement_p(10)
## Arranging by type.
## So if there are 3 horses and 3 zebras in a race.
## Calculate how many different orderings there are of horses and zebras.
type_arrangement_p <- function (n, x, y) {
nf <- factorial(n)
xf <- factorial(x)
yf <- factorial(y)
p <- nf / (xf * yf)
print(p)
}
type_arrangement_p(6, 3, 3)
type_arrangement_p <- function (n, x, y) {
n <- factorial(n)
x <- factorial(x)
y <- factorial(y)
p <- n / (x * y)
print(p)
}
type_arrangement_p(6, 3, 3)
type_arrangement_p <- function (n, x, y) {
n <- factorial(n)
x <- factorial(x)
y <- factorial(y)
p <- 1 (n / (x * y))
print(p)
}
type_arrangement_p(6, 3, 3)
type_arrangement_p <- function (n, x, y) {
n <- factorial(n)
x <- factorial(x)
y <- factorial(y)
p <- 1 / (n / (x * y))
print(p)
}
type_arrangement_p(6, 3, 3)
## 0.003472222
ssn_p(3,2,5)
three <- function(x, y, z) {
n1 <- factorial(x)
n2 <- factorial(y)
n3 <- factorial(z)
p <- (n1 * n2 * n3)
print(p)
}
three(3, 2, 5)
print(factorial(10))
type_arrangement_p(3, 2, 5)
type_arrangement_p <- function (n, x, y) {
n <- factorial(n)
x <- factorial(x)
y <- factorial(y)
p <- n / (x * y)
print(p)
}
type_arrangement_p(3, 2, 5)
type_arrangement_p <- function (n, x, y) {
n <- factorial(n)
x <- factorial(x)
y <- factorial(y)
p <- 1 / (n / (x * y))
print(p)
}
type_arrangement_p(3, 2, 5)
## 0.05 = 1/20 Probability of betting correctly on the right order in which the different species finish.
type_arrangement_three_p <- function (n, x, y, z) {
n <- factorial(n)
x <- factorial(x)
y <- factorial(y)
z <- factorial(z)
p <- 1 / (n / (x * y z))
print(p)
}
type_arrangement_three_p <- function (n, x, y, z) {
n <- factorial(n)
x <- factorial(x)
y <- factorial(y)
z <- factorial(z)
p <- 1 / (n / (x * y * z))
print(p)
}
type_arrangement_three_p(10, 3, 2, 5)
## 0.05 = 1/20 Probability of betting correctly on the right order in which the different species finish.
type_arrangement_three_p <- function (n, x, y, z) {
n <- factorial(n)
x <- factorial(x)
y <- factorial(y)
z <- factorial(z)
p <- n / (x * y * z)
print(p)
}
type_arrangement_three_p(10, 3, 2, 5)
prod(race)
race <- c(3, 2, 5)
prod(race)
prod(factorial(race))
factorial(10) / prod(factorial(race))
type_arrangement <- function(n, x) {
p <- factorial(n) / prod(factorial(x))
print(p)
}
type_arrangement(10, race)
type_arrangement <- function(n, x) {
p <- factorial(n) / prod(factorial(x))
print(p)
}
horse_zebra <- (3, 3)
type_arrangement(6, horse_zebra)
horse_zebra <- (3, 3)
horse_zebra <- c(3, 3)
## Calculate how many different orderings there are of horses and zebras.
type_arrangement <- function(n, x) {
p <- factorial(n) / prod(factorial(x))
print(p)
}
horse_zebra <- c(3, 3)
type_arrangement(6, horse_zebra)
type_arrangement(10, horse_zebra_camel)
## A race between 3 horses, 2 zebras, 5 camels.
## How many ways are there of finishing the race if we're just interested in species of animal in each position?
horse_zebra_camel <- c(3, 2, 5)
type_arrangement(10, horse_zebra_camel)
type_arrangement(6, horse_zebra_camel_in)
horse_zebra_camel_in <- c(3,2,1)
type_arrangement(6, horse_zebra_camel_in)
## To do this, we class the 5 camels as one single object (1).
horse_zebra_camelWins <- c(3,2,1)
type_arrangement(6, horse_zebra_camelWins)
## Find the probability of a camel winning. Divide 60 possible ways the camel can win over the amount of possible ways the horse_zebra_camel can win: 2520.
camel_p <- type_arrangement(10, horse_zebra_camel)
horse_zebra_camel_p <- type_arrangement(6, horse_zebra_camelWins)
camel_win_p <- camel_p / horse_zebra_camel_p
camel_win_p
camel_p <- type_arrangement(10, horse_zebra_camel)
horse_zebra_camel_p <- type_arrangement(6, horse_zebra_camelWins)
camel_win_p <- camel_p / horse_zebra_camel_p
camel_win_p
## Find the probability of a camel winning. Divide 60 possible ways the camel can win over the amount of possible ways the horse_zebra_camel can win: 2520.
camel_p <- type_arrangement(10, horse_zebra_camel)
horse_zebra_camel_p <- type_arrangement(6, horse_zebra_camelWins)
horse_zebra_camel_p <- type_arrangement(10, horse_zebra_camel)
## Find the probability of a camel winning. Divide 60 possible ways the camel can win over the amount of possible ways the horse_zebra_camel can win: 2520.
camel_p <- type_arrangement(6, horse_zebra_camelWins)
camel_win_p <- camel_p / horse_zebra_camel_p
camel_win_p
camels_finishing_together_p <- camel_p / horse_zebra_camel_p
camels_finishing_together_p
factorial(10)
factorial(3)
ten_horses <- factorial(10)
top_3 <- factorial(3)
horse_winning <- top_3 / ten_horses
horse_winning
factorial(20) / factorial(17)
factorial(20-3)
permutations <- function(n, r) {
n_r <- n - r
p <- factorial(n) / factorial(n_r)
print(p)
}
## nPr = n!/(n-r)
permutation <- function(n, r) {
n_r <- n - r
p <- factorial(n) / factorial(n_r)
print(p)
}
permutation(10, 3)
permutation(20, 3)
permutation <- function(n, r) {
n_r_diff <- n - r
p <- factorial(n) / factorial(n_r_diff)
print(p)
}
permutation(20, 3)
print(factorial(20) / factorial(3))
twenty <- factorial(20)
twenty
twenty <- factorial(3)
twenty
twenty <- factorial(10)
twenty
twenty <- factorial(20)
twenty
twenty <- factorial(8)
twenty
twenty <- factorial(5)
twenty
twenty <- factorial(6)
twenty
twenty <- factorial(7)
twenty
twenty <- factorial(8)
twenty
permutation(20, 3)
arrangement <- function(p, r) {
a <- p / factorial(r)
print(a)
}
arrangement(permutation(20, 3), 3)
combinations <- function(p, r) {
a <- p / factorial(r)
print(a)
}
combinations(permutation(20, 3), 3)
combinations(permutation(20, 3), 3)
p_20 <- combinations(20, 3)
p_20 <- permutation(20, 3)
combinations(p_20, 3)
combinations <- function(n, r) {
n_r_diff <- n - r
fac_r_diff <- factorial(r) * factorial(n_r_diff)
c <- factorial(n) / fac_r_diff
print(c)
}
combinations(20, 3)
combinations <- function(n, r) {
n_r_diff <- n - r
fac_r_diff <- factorial(r) * factorial(n_r_diff)
c <- factorial(n) / fac_r_diff
print(c)
}
## Find the combinations of the top 3 horses winning out of 20 horses.
combinations(20, 3)
combinations <- function(n, r) {
n_r_diff <- n - r
fac_nr_diff <- factorial(r) * factorial(n_r_diff)
c <- factorial(n) / fac_nr_diff
print(c)
}
## Find the combinations of the top 3 horses winning out of 20 horses.
combinations(20, 3)
permutation <- function(n, r) {
n_r_diff <- n - r
p <- factorial(n) / factorial(n_r_diff)
print(p)
}
permutation(20, 3)
permutation(6, 1)
permutation(6, 3)
combinations(6, 3)
combinations <- function(n, r) {
n_r_diff <- n - r
fac_r_nr_diff <- factorial(r) * factorial(n_r_diff)
c <- factorial(n) / fac_r_nr_diff
print(c)
}
## Find the combinations of the top 3 horses winning out of 20 horses.
combinations(20, 3)
permutation(20, 1)
## Find the combinations of the top 3 horses winning out of 20 horses.
combinations(20, 1)
permutation(20, 0)
## Find the combinations of the top 3 horses winning out of 20 horses.
combinations(20, 0)
## Find the combinations of the top 3 horses winning out of 20 horses.
combinations(20, 3)
permutation(20, 3)
factorial(5)
combinations(12, 5)
combinations(9, 2)
36/792
all_players <- combinations(12, 5)
## The coach classes 3 of the players as expert shooters.
## What's the probability that all 3 of these players will be on the court at the same time, if they're chosen at random?
## If the three expert shooters are on the court at the same time, this means that there are 2 more places left for the other players.
## We need to find the number of combinations of filling these 2 places from the remaining 9 players.
all_but_3_players <- combinations(9, 2)
## The coach classes 3 of the players as expert shooters.
## What's the probability that all 3 of these players will be on the court at the same time, if they're chosen at random?
## If the three expert shooters are on the court at the same time, this means that there are 2 more places left for the other players.
## We need to find the number of combinations of filling these 2 places from the remaining 9 players.
all_but_three_players <- combinations(9, 2)
## Probability of all 3 shooters being on the court at the same time.
three_top_shooters_p <- all_but_three_players / all_players
three_top_shooters_p
## A poker hand consists of 5 cards and there are 52 cards in a pack.
## How many different arrangements are there?
poker_hand <- combinations(52, 5)
royal_flush <- combinations(13, 5)
same_suit <- combinations(13, 5)
## 1287
same_suit <- combinations(52, 13)
royal_flush <- 4 / poker_hand
royal_flush
## Find the four of a kind.
denominations <- 13 * 48
four_of_a_kind <- denominations / poker_hand
four_of_a_kind
## Find the flush - all 5 cards belong to the same suit.
combinations(13, 8)
## Find the flush - all 5 cards belong to the same suit.
card_suit <- combinations(13, 8)
## Find the flush - all 5 cards belong to the same suit.
card_suit <- combinations(13, 8) * 4
## Find the flush - all 5 cards belong to the same suit.
card_suit <- combinations(13, 8) * 4
card_suit
flush_p <- card_suit / poker_hand
flush_p
royal_flush <- function() {
print(4 / poker_hand)
}
royal_flush()
royal_flush <- function() {
print(4 / poker_hand)
}
royal_flush()
royal_flush <- 4 / poker_hand
royal_flush
royal_flush <- function() {
print(4 / poker_hand)
}
royal_flush()
four_of_kind <- function()
{
denominations <- 13 * 48
print(denominations / poker_hand)
}
four_of_kind()
four_of_kind <- function() {
denominations <- 13 * 48
print(denominations / poker_hand)
}
four_of_kind()
## Flush
flush <- function() {
card_suit <- combinations(13, 8) * 4
print(card_suit / poker_hand)
}
flush()
## 0.001980792
flush <- function() {
d <- combinations(13, 8)
card_suit <- d * 4
print(card_suit / poker_hand)
}
flush()
combinations <- function(n, r) {
n_r_diff <- n - r
fac_r_nr_diff <- factorial(r) * factorial(n_r_diff)
c <- factorial(n) / fac_r_nr_diff
return c
}
## Find the combinations of the top 3 horses winning out of 20 horses.
combinations(20, 3)
combinations <- function(n, r) {
n_r_diff <- n - r
fac_r_nr_diff <- factorial(r) * factorial(n_r_diff)
c <- factorial(n) / fac_r_nr_diff
print(c)
}
## Find the combinations of the top 3 horses winning out of 20 horses.
combinations(20, 3)
## Flush
flush <- function() {
d <- combinations(13, 8)
card_suit <- d * 4
print(card_suit / poker_hand)
}
flush()
## 0.001980792
geometric_distribution <- function(q, p, r) {
pw <- r - 1
gd <- q^pw * p
print(gd)
}
geometric_distribution(0.8, 0.2, 100)
0.8^99
0.8^99 * 0.2
geometric_distribution <- function(q, p, r) {
r_1_diff <- r - 1
gd <- q^r_1_diff * p
print(gd)
}
geometric_distribution(0.8, 0.2, 100)
## 0.000000000005092
geometric_distribution(0.8, 0.2, 20)
